// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProblemDetails ProblemDetails
//
// swagger:model problemDetails
type ProblemDetails struct {

	// Human readable HTTP code explanation
	Code string `json:"code,omitempty"`

	// Human readable description/detail of error
	Detail string `json:"detail,omitempty"`

	// Instance where error occured
	Instance string `json:"instance,omitempty"`

	// invalid params
	// Min Items: 1
	InvalidParams []*InvalidParam `json:"invalidParams,omitempty"`

	// HTTP status code
	Status int32 `json:"status,omitempty"`

	// Human readable title of error
	Title string `json:"title,omitempty"`

	// URI of the resource
	Type string `json:"type,omitempty"`
}

// Validate validates this problem details
func (m *ProblemDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvalidParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProblemDetails) validateInvalidParams(formats strfmt.Registry) error {

	if swag.IsZero(m.InvalidParams) { // not required
		return nil
	}

	iInvalidParamsSize := int64(len(m.InvalidParams))

	if err := validate.MinItems("invalidParams", "body", iInvalidParamsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.InvalidParams); i++ {
		if swag.IsZero(m.InvalidParams[i]) { // not required
			continue
		}

		if m.InvalidParams[i] != nil {
			if err := m.InvalidParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalidParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProblemDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProblemDetails) UnmarshalBinary(b []byte) error {
	var res ProblemDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
